% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nanotime.R
\name{nanotime}
\alias{nanotime}
\alias{nanotime.character}
\alias{nanotime.default}
\alias{nanotime.numeric}
\alias{print.nanotime}
\title{Nanosecond resolution datetime functionality}
\usage{
nanotime(x)

\method{nanotime}{default}(x)

\method{nanotime}{numeric}(x)

\method{nanotime}{character}(x)

\method{print}{nanotime}(x, ...)
}
\arguments{
\item{x}{The object which want to convert to class \code{nanotime}}

\item{...}{Required for print method signatures but ignored here}
}
\description{
Functions to operate on nanosecond time resolution.
}
\section{Caveats}{


Working with dates and times is \emph{difficult}. One
needs a representation of both \emph{time points} and
\emph{time duration}. In R, think of \code{Date} or
\code{POSIXct} objects for the former, and \code{difftime}
for the later. Here we (currently) only have time points,
but they are effectively also durations relative to the
epoch of January 1, 1970.
}

\section{Design}{


There are two external libraries doing two key components.

We rely on the \code{\link{bit64}} package for \code{integer64}
types to represent nanoseconds relative to the epoch.  This is
similar to \code{POSIXct} which uses fractional seconds since the
epoch---so here we are essentially having the same values, but
multiplied by 10 to the power 9 and stored as integers.  We need
to rely on the external package as we require 64 bit integers
whereas R itself onky has 32 bit integers.  The
\code{\link{bit64}} package is clever about how it manages to
provide such an integer using only the 64-bit double type and very
clever (and efficient) transformations.

The other is the CCTZ library in C++. It extending the C++11 standard
library type \code{chrono} type in very useful ways for time zones and
localtime.  We use its formating and parsing features.
}
\examples{
x <- nanotime("1970-01-01T00:00:00.000000001+00:00")
print(x)
x <- x + 1
print(x)
x <- x + 10
print(x)
}
\author{
Dirk Eddelbuettel
}

